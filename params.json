{"name":"NMCalc","tagline":"Desktop Calculator Application","body":"# NMCalc v0.4 [![Build Status](https://travis-ci.org/nnen/nmcalc.svg?branch=master)](https://travis-ci.org/nnen/nmcalc)\r\nNMCalc is primarily a desktop calculator application.  It is very young project, but already has useful functions.\r\n\r\n## Usage\r\nThe application window is divided into three parts (from top to bottom):\r\nhistory window, input window and result window.  Enter an expression into\r\nthe input window (the middle one), the result is shown as you type in the\r\nresult window (the bottom one).  To commit the expression into the history\r\nwindow, press `Ctrl + Enter`.\r\n\r\n![NMCalc Screenshot](https://raw.githubusercontent.com/nnen/nmcalc/master/nmcalc.png)\r\n\r\n## Features\r\n\r\n### Variables\r\n\r\nThe variable assignment syntax is simply:\r\n\r\n    x = <expression>\r\n\r\nVariables are remembered between different expression evaluations, can hold value of any type (real, list, boolean, function, etc.).\r\n\r\n### Functions\r\n\r\nThere are some builtin functions, such as `sin(<real>)`, `apply(<value>, <arguments>)` or `eval(<expression>)`. Apart from those, users can define custom functions using the syntax:\r\n\r\n    def myFunction(<arguments>) <expression>\r\n\r\nFor example, factorial would be defined as:\r\n\r\n    def factorial(x) if x > 1 then x * factorial(x - 1) else 1\r\n\r\nFunction calls use a C-like syntax, for example: `factorial(5)`. Note - function definitions are themselfs expressions, which evaluate to the function itself (functions are first-class objects and as such can be assigned to variables, passed to function arguments or returned by a function).\r\n\r\n### Pattern matching\r\n\r\nThe pattern matching syntax is:\r\n\r\n    match <expression> {\r\n      case <pattern 1> -> <expression>\r\n      case <pattern 2> -> <expression>\r\n      ...\r\n    }\r\n\r\nExample:\r\n\r\n    def append(lst, value) match lst {\r\n      case first :: rest -> first :: append(lst, value)\r\n      case [] -> [value]\r\n    }\r\n    \r\n    append([1, 2, 3], 4) => [1, 2, 3, 4]\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}