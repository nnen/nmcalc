/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.milik.nmcalc.gui;

import cz.milik.nmcalc.IReprContextProvider;
import cz.milik.nmcalc.values.ICalcValue;
import cz.milik.nmcalc.ReprContext;
import cz.milik.nmcalc.peg.ParseResult;
import cz.milik.nmcalc.text.ITextElement;
import cz.milik.nmcalc.text.TextWriter;
import java.util.function.Supplier;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

/**
 *
 * @author jan
 */
public class HistoryView extends javax.swing.JPanel implements IReprContextProvider {

    private MutableAttributeSet lhsStyle = new SimpleAttributeSet();
    private MutableAttributeSet lhsParStyle = new SimpleAttributeSet();
    
    private MutableAttributeSet rhsStyle = new SimpleAttributeSet();
    private MutableAttributeSet rhsParStyle = new SimpleAttributeSet();
    
    
    private IReprContextProvider reprContextSupplier = ReprContext.getDefault();
    
    public IReprContextProvider getReprContextSupplier() {
        return reprContextSupplier;
    }
    
    public void setReprContextSupplier(IReprContextProvider reprContextSupplier) {
        this.reprContextSupplier = reprContextSupplier;
    }
    
    {
        //reprContext.addFlags(ReprContext.Flags.PRETTY_PRINT_HELP);
    }
    
    public ReprContext getReprContext() {
        return getReprContextSupplier().getReprContext();
    }
    
    
    {
        StyleConstants.setItalic(lhsStyle, true);
        
        StyleConstants.setAlignment(lhsParStyle, StyleConstants.ALIGN_LEFT);
        //StyleConstants.setBackground(lhsParStyle, Color.lightGray);
        
        //StyleConstants.setBold(rhsStyle, true);
        StyleConstants.setFontSize(rhsStyle, (int)(getFont().getSize() * 1.5));
        
        StyleConstants.setAlignment(rhsParStyle, StyleConstants.ALIGN_RIGHT);
        StyleConstants.setSpaceBelow(rhsParStyle, 6);
    }
    
    /**
     * Creates new form HistoryView
     */
    public HistoryView() {
        initComponents();
        
        textPane.setReprContextProvider(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textPane = new cz.milik.nmcalc.gui.HyperTextPane();

        setLayout(new java.awt.BorderLayout());
        add(textPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    
    public void append(ITextElement element) {
        textPane.append(element);
    }
    
    public void prepend(ITextElement element) {
        textPane.prepend(element);
    }
    
    public void append(String expr, ICalcValue value) {
        TextWriter tw = new TextWriter();
        
        //tw.startBlockQuote();
        tw.codeBlock(expr);
        //tw.end();
        
        if (value.isHelp()) {
            textPane.append(tw.getResult());
            textPane.appendMarkup(value.getRepr(getReprContext()));
        } else if (value.isError()) {
            value.printDebug(tw, getReprContext());
            textPane.append(tw.getResult());
        } else {
            tw.startPar();
            tw.append(value, getReprContextSupplier());
            tw.end();
            textPane.append(tw.getResult());
        }
    }
    
    public void prependMarkup(String markup) {
        textPane.prependMarkup(markup);
    }
    
    public void appendMarkup(String markup) {
        textPane.appendMarkup(markup);
        //HyperTextPane.appendMarkup(outputPane.getStyledDocument(), markup);
    }
    
    public void append(String expr, ParseResult<ICalcValue> parsed) {
        /*
        if (parsed.isSuccess()) {
            append(expr, parsed.getValue());
        } else {
            append(expr, parsed.getErrorMessage());
        }
                */
    }

    public void clear() {
        textPane.clear();
    }

    
    public boolean addHyperTextListener(HyperTextPane.IListener e) {
        return textPane.addHyperTextListener(e);
    }

    public boolean removeHyperTextListener(HyperTextPane.IListener o) {
        return textPane.removeHyperTextListener(o);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private cz.milik.nmcalc.gui.HyperTextPane textPane;
    // End of variables declaration//GEN-END:variables
}
