/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.milik.nmcalc.gui;

import cz.milik.nmcalc.values.ICalcValue;
import cz.milik.nmcalc.ReprContext;
import cz.milik.nmcalc.peg.ParseResult;
import cz.milik.nmcalc.text.ITextElement;
import cz.milik.nmcalc.text.MarkupParser;
import java.awt.Rectangle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author jan
 */
public class HistoryView extends javax.swing.JPanel {

    private MutableAttributeSet lhsStyle = new SimpleAttributeSet();
    private MutableAttributeSet lhsParStyle = new SimpleAttributeSet();
    
    private MutableAttributeSet rhsStyle = new SimpleAttributeSet();
    private MutableAttributeSet rhsParStyle = new SimpleAttributeSet();
    
    
    private ReprContext reprContext = new ReprContext();
    
    {
        reprContext.getFlags().add(ReprContext.Flags.PRETTY_PRINT_HELP);
    }
    
    public ReprContext getReprContext() {
        return reprContext;
    }
    
    public void setReprContext(ReprContext reprContext) {
        this.reprContext = reprContext;
    }
    
    
    {
        StyleConstants.setItalic(lhsStyle, true);
        
        StyleConstants.setAlignment(lhsParStyle, StyleConstants.ALIGN_LEFT);
        //StyleConstants.setBackground(lhsParStyle, Color.lightGray);
        
        //StyleConstants.setBold(rhsStyle, true);
        StyleConstants.setFontSize(rhsStyle, (int)(getFont().getSize() * 1.5));
        
        StyleConstants.setAlignment(rhsParStyle, StyleConstants.ALIGN_RIGHT);
        StyleConstants.setSpaceBelow(rhsParStyle, 6);
    }
    
    /**
     * Creates new form HistoryView
     */
    public HistoryView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        outputPane.setEditable(false);
        outputPane.setFont(GUIUtils.getCodeFont());
        scrollPane.setViewportView(outputPane);

        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    
    public void append(String str) {
        append(str, (AttributeSet)null, null);
    }
    
    public int append(String str, AttributeSet attributes, AttributeSet parAttributes) {
        StyledDocument doc = outputPane.getStyledDocument();
        int offset = doc.getLength();
        try {
            doc.insertString(offset, str, null);
            if (attributes != null) {
                doc.setCharacterAttributes(offset, str.length(), attributes, true);
            }
            if (parAttributes != null) {
                doc.setParagraphAttributes(offset, str.length(), parAttributes, true);
            }
        } catch (BadLocationException ex) {
            Logger.getLogger(HistoryView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return offset + str.length();
    }
    
    public void append(ICalcValue expr, ICalcValue value) {
        append(expr.getRepr(getReprContext()), value);
    }
    
    public void append(String expr, ICalcValue value) {
        if (value.isHelp()) {
            //appendHelp(expr, value.get)
            appendHelp(expr, value.getRepr(getReprContext()));
        } else {
            append(expr, value.getRepr(getReprContext()));
        }
    }
    
    public void append(String expr, String value) {
        append(">>> ");
        append(expr + "\n", lhsStyle, lhsParStyle);
        int pos = append(value + "\n", rhsStyle, rhsParStyle);
        
        try {
            Rectangle rect = outputPane.modelToView(pos);
            outputPane.scrollRectToVisible(rect);
        } catch (BadLocationException ex) {
            Logger.getLogger(HistoryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void appendHelp(String expr, String value) {
        MarkupParser parser = new MarkupParser();
        ITextElement element = parser.parse(value);
        
        append(">>> ");
        append(expr + "\n", lhsStyle, lhsParStyle);
        
        //append(value + "\n", null, null);
        
        HyperTextPane.append(outputPane.getStyledDocument(), element);
    }
    
    public void appendMarkup(String markup) {
        HyperTextPane.appendMarkup(outputPane.getStyledDocument(), markup);
    }
    
    public void append(String expr, ParseResult<ICalcValue> parsed) {
        if (parsed.isSuccess()) {
            append(expr, parsed.getValue());
        } else {
            append(expr, parsed.getErrorMessage());
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane outputPane;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
